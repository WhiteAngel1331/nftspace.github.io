{"version":3,"sources":["js/functions/request.js","js/modules/renderData.js","js/modules/main.js","js/functions/requestAddress.js","js/modules/renderDataWithProp.js","js/modules/MainList.js","App.js","reportWebVitals.js","index.js"],"names":["requestBlock","txID","a","requestJsonBlock","block","hexFirstData_to_ascii","verifyIsImage","hexToBase64","blockTexto","hex_to_ascii","url","fetch","res","text","console","log","str1","hex","toString","str","n","length","String","fromCharCode","parseInt","substr","split","counter","hexSingle","hexstring","btoa","match","map","join","Renderdata","props","useState","setTXID","modal","setModal","conteudo","setConteudo","conteudoJSON","setFooterContent","Token","TX1","ADD","TXID","className","type","id","onChange","event","target","value","onClick","style","display","flexDirection","isImage","src","Content","alt","Main","setTela","footerContent","marginRight","href","requestAddressBlock","requestAddressJSONBlock","addressBlock","trataAddressJson","address","json","txIDS","push","tx_hash","RenderDataWithProp","useEffect","getConteudo","MainID","MainList","setTXIDS","result","fetchData","txid","App","tela","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9dae0a4.chunk.js","sourcesContent":["export default async function requestBlock(txID){\r\n    let block = await requestJsonBlock(txID);\r\n    block = hexFirstData_to_ascii(block);\r\n    let isImage = verifyIsImage(block[1]);\r\n    if(isImage){\r\n        return {\r\n            \"isImage\": true,\r\n            \"Token\":block[0][1],\r\n            \"TX1\":block[0][2],\r\n            \"ADD\":block[0][3],\r\n            \"Content\":`data:image/png;base64,${hexToBase64(block[1])}`,\r\n            \"MainID\":txID,\r\n            \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n        }\r\n    }else{\r\n        let blockTexto = hex_to_ascii(block[1])\r\n\r\n        return {\r\n            \"isImage\": false,\r\n            \"Token\":block[0][1],\r\n            \"TX1\":block[0][2],\r\n            \"ADD\":block[0][3],\r\n            \"Content\":blockTexto,\r\n            \"MainID\":txID,\r\n            \"WhatsOnChainLink\":`https://whatsonchain.com/tx/${txID}`\r\n        }\r\n    }\r\n\r\n}\r\n\r\nasync function requestJsonBlock(txID){\r\n    let url = `https://api.whatsonchain.com/v1/bsv/main/tx/${txID}/out/0/hex`\r\n\r\n    try{\r\n        let res = await fetch(url)\r\n        return await res.text();\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n\r\n} \r\n\r\nfunction hexFirstData_to_ascii(str1){\r\n    var hex  = str1.toString();\r\n    var str = '';\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n        if(String.fromCharCode(parseInt(hex.substr(n, 2), 16)) === \"&\"){\r\n            return [str.split(\"\\n\"), hex.substr(n+2)]\r\n        }\r\n        str+= String.fromCharCode(parseInt(hex.substr(n, 2), 16))\r\n    }\r\n}\r\n\r\nfunction hex_to_ascii(str1){\r\n    var hex  = str1.toString();\r\n    var str = '';\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nfunction verifyIsImage(block){\r\n    let hex = block.toString()\r\n    let counter = 0\r\n\r\n    for (let n = 0; n < 300; n+=2) {\r\n        let hexSingle = parseInt(hex.substr(n, 2), 16)\r\n\r\n        if(counter === 20){\r\n            return true\r\n        } \r\n\r\n        \r\n        if((hexSingle > 1 && hexSingle < 31) || (hexSingle > 128 && hexSingle < 255)){\r\n            counter++\r\n        }\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction hexToBase64(hexstring) {\r\n    return btoa(hexstring.match(/\\w{2}/g).map(function(a) {\r\n        return String.fromCharCode(parseInt(a, 16));\r\n    }).join(\"\"));\r\n} ","import React, { useState } from 'react';\r\nimport '../../css/App.css';\r\nimport requestBlock from \"../functions/request.js\"\r\n\r\nexport default function Renderdata(props){\r\n\r\n    const [txID, setTXID] = useState('')\r\n    const [modal, setModal] = useState(true)\r\n    const [conteudo, setConteudo] = useState(null)\r\n\r\n    async function mostraConteudo(){\r\n        try {\r\n            var conteudoJSON = await requestBlock(txID)\r\n        } catch (error) {\r\n\r\n        }  \r\n       \r\n        props.setFooterContent({\r\n            \"Token\":conteudoJSON.Token,\r\n            \"TX1\":conteudoJSON.TX1,\r\n            \"ADD\":conteudoJSON.ADD,\r\n            \"TXID\":conteudoJSON.TXID\r\n          })\r\n\r\n       \r\n        await setConteudo(conteudoJSON)\r\n        setModal(false)\r\n\r\n    }\r\n\r\n\r\n    if(modal){\r\n        return(\r\n            <div className=\"modal\">\r\n                <input type=\"text\" id=\"inputTXID\" onChange={(event)=>setTXID(event.target.value)}></input>\r\n                <button onClick={mostraConteudo} id=\"submit\">Enviar</button>\r\n            </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div className=\"imagemNFT\" style={{display:'flex',flexDirection:'column'}}>\r\n                {\r\n                    (conteudo.isImage)\r\n                    ?\r\n                    <img src={conteudo.Content} className=\"imagemNFT\" alt=\"imagem\"></img>\r\n                    :\r\n                    <p>{conteudo.Content}</p>\r\n                }\r\n                <input type=\"button\" value=\"Digite outro NFT\" \r\n                onClick={() => {setModal(true); props.setFooterContent({\r\n                    \"Token\":\"\",\r\n                    \"TX1\":\"\",\r\n                    \"ADD\":\"\"\r\n                  })}}></input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { useState } from \"react\";\r\nimport \"../../css/App.css\"\r\nimport Renderdata from \"./renderData.js\"\r\n\r\nexport default function Main(props){\r\n\r\n    const setTela = props.setTela\r\n\r\n    const [footerContent, setFooterContent] = useState({\r\n        \"Token\":\"\",\r\n        \"TX1\":\"\",\r\n        \"ADD\":\"\",\r\n        \"TXID\":\"\"\r\n      })\r\n\r\n    return (\r\n        <div className=\"main\">\r\n          <header className=\"header\">\r\n            <h1>NFTSpace</h1>\r\n            <input type=\"button\" \r\n            onClick={()=>setTela(\"MainList\")} \r\n            style={{marginRight:50}}\r\n            value=\"NFT List\"></input>\r\n          </header>\r\n          <div className=\"subHeader\">NFT DATA: </div>\r\n          <div className=\"conteudo\">\r\n            <Renderdata \r\n            setFooterContent={setFooterContent}\r\n            ></Renderdata>\r\n          </div>\r\n          <footer>\r\n            <h1>TOKEN: {footerContent.Token}</h1>\r\n            <h1>TX1: <a href={footerContent.TXID}>{footerContent.TX1}</a></h1>\r\n            <h1>ADD: {footerContent.ADD}</h1>\r\n          </footer>\r\n        </div>  \r\n      );\r\n}","export default async function requestAddressBlock(){\r\n    const address = \"1GHz8oqDXRRSBiXfWxkmB3fzCFvLaCbAMF\"\r\n    let addressBlock = await requestAddressJSONBlock(address)\r\n    \r\n    addressBlock = trataAddressJson(addressBlock)\r\n    \r\n    return addressBlock\r\n\r\n}\r\n\r\nasync function requestAddressJSONBlock(address){\r\n\r\n    let url = `https://api.whatsonchain.com/v1/bsv/main/address/${address}/history`\r\n    try {\r\n        let res = await fetch(url);\r\n        return await res.json()\r\n    } catch (error) {\r\n        \r\n    } \r\n}\r\n\r\nfunction trataAddressJson(addressBlock){\r\n    let txIDS = []\r\n\r\n    addressBlock.map((address)=>{\r\n        txIDS.push(address.tx_hash)\r\n    })\r\n\r\n    return txIDS\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../../css/App.css';\r\nimport requestBlock from \"../functions/request.js\"\r\n\r\nexport default function RenderDataWithProp(props){\r\n\r\n    const [conteudo, setConteudo] = useState({})\r\n\r\n    useEffect(()=>{\r\n        async function getConteudo(){\r\n            try {\r\n                let conteudoJSON = await requestBlock(props.TXID)\r\n                await setConteudo(conteudoJSON)\r\n            } catch (error) {\r\n    \r\n            }\r\n        }\r\n\r\n        getConteudo()\r\n    })\r\n\r\n\r\n   if(conteudo.Content !== {}){\r\n    return(\r\n        <div className=\"renderDataWithProp\">\r\n            <div className=\"renderDataWithProp-left\">\r\n                <h1>MainID: <a>{conteudo.MainID}</a></h1>\r\n            </div>\r\n            <div className=\"renderDataWithProp-right\">\r\n                {\r\n                (conteudo.isImage)\r\n                ?\r\n                    <img  \r\n                    src={conteudo.Content} \r\n                    className=\"imagemAddressPreview\"\r\n                    alt=\"Descrição da Imagem\"></img>\r\n                :\r\n                <p>{conteudo.Content}</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n   }\r\n}\r\n\r\n/**\r\n<div style={{display:'flex',height:20, backgroundColor:\"red\"}}>\r\n            <div style={{backgroundColor:'blue', flex:70}}></div>\r\n            <div style={{backgroundColor:'green', flex:30}}>\r\n               \r\n            </div>\r\n        </div>\r\n */\r\n\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport \"../../css/App.css\"\r\nimport requestAddressBlock from \"../functions/requestAddress.js\"\r\nimport RenderDataWithProp from \"./renderDataWithProp\"\r\n\r\nexport default function MainList(props){\r\n\r\n    const [txIDS, setTXIDS] = useState([])\r\n    \r\n    useEffect(()=>{\r\n\r\n        async function fetchData(){\r\n            const result = await requestAddressBlock()\r\n            setTXIDS(result)\r\n        }\r\n\r\n        fetchData()\r\n\r\n    },[])\r\n\r\n    console.log(txIDS)\r\n\r\n    return(    \r\n        <div className=\"main\">\r\n            <header className=\"header\">\r\n                <h1>NFTSpace</h1>\r\n            </header>\r\n            <div className=\"subHeader\">NFT DATA: </div>\r\n            <div>\r\n                {\r\n                    txIDS.map((txid)=>{\r\n                        return <RenderDataWithProp TXID={txid}></RenderDataWithProp>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\nimport './css/App.css';\nimport Main from \"./js/modules/main.js\"\nimport MainList from \"./js/modules/MainList.js\"\n\n\nexport default function App() {\n\n  const [tela, setTela] = useState(\"main\") \n  \n  if(tela === \"main\"){\n    return <Main setTela={setTela}></Main>\n  }else if(tela === \"MainList\"){\n    return <MainList></MainList>\n  }\n\n\n\n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}